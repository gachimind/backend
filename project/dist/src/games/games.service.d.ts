import { Repository } from 'typeorm';
import { KeywordService } from 'src/keyword/keyword.service';
import { PlayersService } from './players.service';
import { RoomService } from './room.service';
import { GameResult } from './entities/gameResult.entity';
import { Room } from './entities/room.entity';
import { TodayResult } from './entities/todayResult.entity';
import { Turn } from './entities/turn.entity';
import { TurnResult } from './entities/turnResult.entity';
import { TurnResultDataInsertDto } from './dto/turn-result.data.insert.dto';
import { Player } from './entities/player.entity';
import { NextFunction } from 'express';
import { Keyword } from 'src/keyword/entities/keyword.entities';
export declare class GamesService {
    private readonly roomService;
    private readonly playersService;
    private readonly keywordsService;
    private readonly playersRepository;
    private readonly turnRepository;
    private readonly turnResultRepository;
    private readonly gameResultRepository;
    private readonly todayResultRepository;
    constructor(roomService: RoomService, playersService: PlayersService, keywordsService: KeywordService, playersRepository: Repository<Player>, turnRepository: Repository<Turn>, turnResultRepository: Repository<TurnResult>, gameResultRepository: Repository<GameResult>, todayResultRepository: Repository<TodayResult>);
    getTurnsByRoomId(roomInfo: number): Promise<Turn[]>;
    getAllTurnsByRoomId(roomInfo: number): Promise<Turn[]>;
    createTurn(roomId: number): Promise<Turn>;
    updateTurn(turn: Turn, timer: string): Promise<Turn>;
    deleteTurnByRoomId(roomInfo: number): Promise<void>;
    deleteTurnByTurnId(turnId: number): Promise<void>;
    createTurnResult(turnResult: TurnResultDataInsertDto): Promise<TurnResultDataInsertDto & TurnResult>;
    sumTurnScorePerPlayerByUserId(roomId: number, gameResultId: number): Promise<number>;
    createGameResultPerPlayer(roomId: number): Promise<GameResult[]>;
    updateGameResult(gameResultId: number, gameScore: number): Promise<{
        gameResultId: number;
        gameScore: number;
    } & GameResult>;
    softDeleteGameResult(gameResultId: number): Promise<import("typeorm").UpdateResult>;
    updateTodayResultByIncrement(todayResultId: number, gameScore: number): Promise<import("typeorm").UpdateResult>;
    recordPlayerScore(userId: number, room: Room): Promise<TurnResult>;
    createSpeechPlayerTurnResult(roomId: number, turn: Turn): Promise<number>;
    handleGameEndEvent(room: Room): Promise<Room>;
    createGameMap(room: Room): Promise<void>;
    popGameMapKeywords(roomId: number): Keyword;
    getGameMapKeywordsCount(roomId: number): number;
    getGameMapRemainingTurns(roomId: number): number;
    getGameMapCurrentTurn(roomId: number): number;
    getGameMapCurrentPlayers(roomId: number): number;
    updateGameMapCurrentTurn(roomId: number, turnId: number, turn: number): void;
    reduceGameMapCurrentPlayers(roomId: number): void;
    popPlayerFromGameMapRemainingTurns(roomId: number): number;
    removePlayerFromGameMapRemainingTurns(roomId: number, userId: number): Promise<void>;
    mapGameResultIdWithUserId(roomId: number, gameResults: any): Promise<void>;
    createTurnMap(roomId: number, keyword: Keyword): void;
    updateTurnMapSpeechScore(roomId: number, score: number): number;
    updateTurnMapTurnQuizRank(roomId: number): void;
    updateTurnMapNumberOfEvaluators(roomInfo: any): Promise<void>;
    createTimer(time: number, roomId: number): Promise<any>;
    breakTimer(roomId: number, next: NextFunction): void;
}
